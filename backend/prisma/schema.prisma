generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model actors {
  actor_id       Int            @id @default(autoincrement())
  name           String         @db.VarChar(255)
  bio            String?
  country_id     Int?
  photo_filename String?        @db.VarChar(255)
  countries      countries?     @relation(fields: [country_id], references: [country_id], onDelete: NoAction, onUpdate: NoAction)
  movie_actors   movie_actors[]
}

model countries {
  country_id Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(100)
  actors     actors[]
  directors  directors[]
  movies     movies[]
}

model directors {
  director_id     Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  bio             String?
  country_id      Int?
  photo_filename  String?           @db.VarChar(255)
  countries       countries?        @relation(fields: [country_id], references: [country_id], onDelete: NoAction, onUpdate: NoAction)
  movie_directors movie_directors[]
}

model genres {
  genre_id     Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(50)
  movie_genres movie_genres[]
}

model movie_actors {
  movie_id       Int
  actor_id       Int
  character_name String? @db.VarChar(255)
  actors         actors  @relation(fields: [actor_id], references: [actor_id], onDelete: NoAction, onUpdate: NoAction)
  movies         movies  @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([movie_id, actor_id])
}

model movie_directors {
  movie_id    Int
  director_id Int
  directors   directors @relation(fields: [director_id], references: [director_id], onDelete: NoAction, onUpdate: NoAction)
  movies      movies    @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([movie_id, director_id])
}

model movie_genres {
  movie_id Int
  genre_id Int
  genres   genres @relation(fields: [genre_id], references: [genre_id], onDelete: NoAction, onUpdate: NoAction)
  movies   movies @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([movie_id, genre_id])
}

model movies {
  movie_id             Int                    @id @default(autoincrement())
  title                String                 @db.VarChar(255)
  original_title       String?                @db.VarChar(255)
  year                 Int?
  description          String?
  kinomatch_rating     Decimal?               @db.Decimal(3, 1)
  imdb_rating          Decimal?               @db.Decimal(3, 1)
  country_id           Int?
  poster_filename      String?                @db.VarChar(255)
  trailer_filename     String?                @db.VarChar(255)
  collection_movies    collection_movies[]
  movie_actors         movie_actors[]
  movie_directors      movie_directors[]
  movie_genres         movie_genres[]
  movie_online_cinema  movie_online_cinema[]
  movie_reviews        movie_reviews[]
  countries            countries?             @relation(fields: [country_id], references: [country_id], onDelete: NoAction, onUpdate: NoAction)
  user_movie_favorites user_movie_favorites[]
}

model user_movie_favorites {
  user_id  Int
  movie_id Int
  added_at DateTime? @default(now()) @db.Timestamp(6)
  movies   movies    @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction)
  users    users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, movie_id])
}

model users {
  user_id                Int                      @id @default(autoincrement())
  username               String                   @unique @db.VarChar(50)
  email                  String                   @unique @db.VarChar(255)
  password_hash          String                   @db.VarChar(255)
  registration_date      DateTime?                @default(now()) @db.Timestamp(6)
  rating                 Int?                     @default(0)
  movie_reviews          movie_reviews[]
  user_movie_collections user_movie_collections[]
  user_movie_favorites   user_movie_favorites[]
}

model collection_movies {
  collection_movie_id    Int                     @id @default(autoincrement())
  collection_id          Int?
  movie_id               Int?
  user_movie_collections user_movie_collections? @relation(fields: [collection_id], references: [collection_id], onDelete: NoAction, onUpdate: NoAction)
  movies                 movies?                 @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction)
}

model user_movie_collections {
  collection_id     Int                 @id @default(autoincrement())
  user_id           Int?
  title             String              @db.VarChar(255)
  likes             Int?                @default(0)
  is_published      Boolean             @default(false)
  collection_movies collection_movies[]
  users             users?              @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([is_published], map: "idx_user_movie_collections_is_published")
  @@index([user_id, is_published], map: "idx_user_movie_collections_user_id_is_published")
}

model movie_online_cinema {
  movie_cinema_id  Int            @id @default(autoincrement())
  movie_id         Int?
  online_cinema_id Int?
  movies           movies?        @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction)
  online_cinema    online_cinema? @relation(fields: [online_cinema_id], references: [online_cinema_id], onDelete: NoAction, onUpdate: NoAction)
}

model movie_reviews {
  movie_review_id Int      @id @default(autoincrement())
  movie_id        Int?
  review_id       Int?
  user_id         Int?
  movies          movies?  @relation(fields: [movie_id], references: [movie_id], onDelete: NoAction, onUpdate: NoAction)
  reviews         reviews? @relation(fields: [review_id], references: [review_id], onDelete: NoAction, onUpdate: NoAction)
  users           users?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model online_cinema {
  online_cinema_id    Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  image_url           String?               @db.VarChar(255)
  movie_online_cinema movie_online_cinema[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id     Int             @id @default(autoincrement())
  text          String
  score         Int
  movie_reviews movie_reviews[]
}
