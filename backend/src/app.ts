// backend/src/app.ts
import Elysia from 'elysia';
import { swagger } from '@elysiajs/swagger';
import { cors } from '@elysiajs/cors';
import { jwt } from '@elysiajs/jwt';
// --- –î–û–ë–ê–í–¨ –≠–¢–û ---
import { staticPlugin } from '@elysiajs/static';
import path from 'path'; // –£–±–µ–¥–∏—Å—å, —á—Ç–æ path –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
// --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
import 'dotenv/config';
import colors from "colors";
import packageJSON from "./../package.json";
import { Logestic } from 'logestic';
import fs from 'node:fs/promises';
import cron from 'node-cron';
import { updateSystemCompilationsByGenre } from './service/compilations.service';

// –ò–º–ø–æ—Ä—Ç Elysia —Ä–æ—É—Ç–æ–≤
import AuthRoute from "./route/auth.route";
import ProfileRoute from "./route/profile.route";
import ActorsRoute from './route/actors.route';
import MoviesRoute from './route/movies.route';
import GenresRoute from './route/genres.route';
import DirectorsRoute from './route/directors.route';
import CountriesRoute from './route/countries.route';
import CompilationsRoute from './route/compilations.route';
import PostsRoute from './route/posts.route';

const app = new Elysia();

async function bootstrap() {
    const JWT_SECRET = process.env.JWT_SECRET;

    if (!JWT_SECRET) {
        console.error(colors.red("FATAL ERROR: JWT_SECRET environment variable is not defined!"));
        process.exit(1);
    }

    // –ü–ª–∞–≥–∏–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    app.use(Logestic.preset('fancy'));

    // –ü–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT
    app.use(
        jwt({
            name: 'jwt',
            secret: JWT_SECRET
        })
    );

    // --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ë–õ–û–ö –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–ê–¢–ò–ö–ò ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'assets', –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç process.cwd() (–æ–±—ã—á–Ω–æ –∫–æ—Ä–µ–Ω—å –ø–∞–ø–∫–∏ backend)
    const assetsFolder = 'data/images'; // –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (backend/)
    const absoluteAssetsPath = path.resolve(process.cwd(), assetsFolder); // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ª–æ–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
    console.log(colors.magenta(`Serving static files from (using assets): ${absoluteAssetsPath}`));
    console.log(colors.magenta(`process.cwd(): ${process.cwd()}`)); // –ü–æ—Å–º–æ—Ç—Ä–∏–º —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
    try {
        await fs.mkdir(absoluteAssetsPath, { recursive: true });
        await fs.mkdir(path.join(absoluteAssetsPath, 'posts'), { recursive: true }); // –ò –¥–ª—è –ø–æ—Å—Ç–æ–≤
        console.log(colors.green(`Static directories ensured/created at ${absoluteAssetsPath}`));
    } catch (error) {
        console.error(colors.red(`Error creating static directories:`), error);
    }

    app.use(staticPlugin({
        assets: assetsFolder,   // <--- –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        prefix: '/public/images', // <--- –ü—Ä–µ—Ñ–∏–∫—Å URL –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ
        // noCache: true,       // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        // alwaysStatic: true, // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ assets –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É
    }));
    console.log(colors.yellow(`Static file serving enabled at /public/images using assets folder: '${assetsFolder}'`));
    // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å /public/images/posts/file.png –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª –≤ backend/data/images/posts/file.png
    // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê --



    // –ü–ª–∞–≥–∏–Ω –¥–ª—è Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    app.use(swagger( /* ... —Ç–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ swagger ... */ ));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ OPTIONS
    app.options("*", (ctx) => {
        ctx.set.status = 204;
        return '';
    });

    // –ü–ª–∞–≥–∏–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
    app.use(cors({
        credentials: true,
        origin: 'http://localhost:3000',
        allowedHeaders: "Origin, X-Requested-With, Content-Type, Accept, Authorization",
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS']
    }));

    // –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    app.get("/", () => {
        return {
            message: `KinoMatch Backend API v${packageJSON.version} is running!`
        };
    });

    // –†–æ—É—Ç –¥–ª—è favicon (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    app.get("/favicon.ico", async ({ set }) => { /* ... —Ç–≤–æ–π –∫–æ–¥ favicon ... */ });

    // --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ---
    app.onError(({ code, error, set }) => { /* ... —Ç–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ... */ });

    // --- –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—Å–µ—Ö API —Ä–æ—É—Ç–æ–≤ ---
    app.group("/api", (apiGroup) =>
        apiGroup
            .use(AuthRoute)
            .use(ProfileRoute)
            .use(ActorsRoute)
            .use(MoviesRoute)
            .use(GenresRoute)
            .use(DirectorsRoute)
            .use(CountriesRoute)
            .use(CompilationsRoute)
            .use(PostsRoute) // –†–æ—É—Ç –ø–æ—Å—Ç–æ–≤ —É–∂–µ –∑–¥–µ—Å—å
    );

    // --- –ó–∞–ø—É—Å–∫ Cron Job –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–æ–∫ ---
    cron.schedule('0 3 * * *', async () => { /* ... —Ç–≤–æ–π cron job ... */ });
    console.log(colors.yellow('Cron job for compilations update scheduled...'));

    // --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
    const PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 8000;
    app.listen(PORT, () => {
        console.log(colors.green(`üöÄ Server v${packageJSON.version} started successfully on http://localhost:${PORT}`));
        console.log(colors.blue(`üìö API Documentation available at http://localhost:${PORT}/docs`));
        console.log(colors.magenta(`üñºÔ∏è Images will be served from /public/images`)); // –î–æ–±–∞–≤–∏–º –ª–æ–≥
    });
}

bootstrap().catch(err => {
    console.error(colors.red("üí• Failed to bootstrap the application:"), err);
    process.exit(1);
});